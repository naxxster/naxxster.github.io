{"version":3,"sources":["aws-exports.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Auth","region","userPoolId","userPoolWebClientId","identityPoolId","API","graphql_endpoint","Storage","AWSS3","bucket","Amplify","configure","awsConfig","Logger","LOG_LEVEL","NewAlbum","props","handleChange","event","change","target","name","value","setState","handleSubmit","a","preventDefault","graphql","graphqlOperation","state","albumName","result","console","info","data","createAlbum","id","Segment","Header","as","Input","type","placeholder","icon","iconPosition","action","content","onClick","this","onChange","Component","AlbumList","albums","sort","key","order","b","hasOwnProperty","aVal","toUpperCase","bVal","comparison","makeComparator","map","album","List","Item","to","divided","relaxed","albumItems","AlbumListLoader","query","loading","errors","length","JSON","stringify","listAlbums","AlbumDetailsLoader","getAlbum","AlbumMembers","Icon","Content","bulleted","members","member","AlbumDetails","Group","basic","albumId","photos","S3ImageUpload","e","file","files","fileName","uuid","uploading","put","customPrefix","public","metadata","albumid","putResult","log","fullsize","thumbnail","Form","Button","input","document","getElementById","click","disabled","accept","style","display","PhotosList","photo","imgKey","replace","Divider","hidden","photoItems","AddUsernameToAlbum","username","addUsernameToAlbum","App","Grid","padded","Column","path","exact","component","render","match","params","withAuthenticator","Boolean","window","location","hostname","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e0cf4b26.chunk.js","sourcesContent":["export default {\n  Auth: {\n    region: 'us-west-2',\n    userPoolId: 'us-west-2_uEZ8FEnAB',\n    userPoolWebClientId: '2b8vlmnot2n9g8ilopdahte1c5',\n    identityPoolId: 'us-west-2:3aff22a8-3397-44c4-81ee-f7510948be34'\n  },\n  API: {\n    graphql_endpoint: 'https://d16ie2jd28d342.cloudfront.net/graphql'\n  },\n  Storage: {\n    AWSS3: {\n      bucket: 'photagram-108331135934-us-west-2',\n      region: 'us-west-2'\n    }\n  }\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport Amplify, { graphqlOperation, API, Storage } from 'aws-amplify';\nimport awsConfig from './aws-exports';\nimport { withAuthenticator, Connect, S3Image } from 'aws-amplify-react';\nimport { Divider, Form, Grid, Header, Icon, List, Segment, Input } from 'semantic-ui-react';\nimport { BrowserRouter as Router, Route, NavLink } from 'react-router-dom';\nimport { v4 as uuid } from 'uuid';\n\nAmplify.configure(awsConfig);\nAmplify.Logger.LOG_LEVEL = 'DEBUG';\n\nfunction makeComparator(key: string, order = 'asc') {\n  return (a: any, b: any) => {\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) return 0;\n\n    const aVal = (typeof a[key] === 'string') ? a[key].toUpperCase() : a[key];\n    const bVal = (typeof b[key] === 'string') ? b[key].toUpperCase() : b[key];\n\n    let comparison = 0;\n    if (aVal > bVal) comparison = 1;\n    if (aVal < bVal) comparison = -1;\n\n    return order === 'desc' ? (comparison * -1) : comparison;\n  }\n}\n\ninterface NewAlbumState {\n  albumName: string;\n}\n\nclass NewAlbum extends Component<{}, NewAlbumState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      albumName: ''\n    };\n  }\n\n  handleChange = (event) => {\n    let change = {};\n    change[event.target.name] = event.target.value;\n    this.setState(change);\n  }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    const NewAlbum = `mutation NewAlbum($name: String!) {\n      createAlbum(name: $name, userId: 1) {\n        id\n        name\n      }\n    }`;\n\n    const result = await API.graphql(graphqlOperation(NewAlbum, {\n      name: this.state.albumName\n    }));\n    console.info(`Created album with id ${result.data.createAlbum.id}`);\n  }\n\n  render() {\n    return (\n      <Segment>\n        <Header as='h3'>Add a new album</Header>\n        <Input\n          type='text'\n          placeholder='New Album Name'\n          icon='plus'\n          iconPosition='left'\n          action={{ content: 'Create', onClick: this.handleSubmit }}\n          name='albumName'\n          value={this.state.albumName}\n          onChange={this.handleChange}\n        />\n      </Segment>\n    );\n  }\n}\n\ninterface Album {\n  id: number;\n  name: string;\n}\n\ninterface AlbumListProps {\n  albums: Album[];\n}\n\nclass AlbumList extends Component<AlbumListProps> {\n  albumItems() {\n    return this.props.albums.sort(makeComparator('name')).map(album =>\n      <List.Item key={album.id}>\n        <NavLink to={`/albums/${album.id}`}>{album.name}</NavLink>\n      </List.Item>\n    );\n  }\n\n  render() {\n    return (\n      <Segment>\n        <Header as='h3'>My Albums</Header>\n        <List divided relaxed>\n          {this.albumItems()}\n        </List>\n      </Segment>\n    )\n  }\n}\n\ninterface ListAlbumsResult {\n  listAlbums: Album[];\n}\n\nconst ListAlbums = `query ListAlbums {\n  listAlbums {\n    id\n    name\n  }\n}`;\n\nclass AlbumListLoader extends Component {\n  render() {\n    return (\n      <Connect query={graphqlOperation(ListAlbums)}>\n        {({ data, loading, errors }) => {\n          if (loading) return (<div>Loading...</div>);\n          if (errors.length > 0) return (<h3>{JSON.stringify(errors)}</h3>);\n          if (!data.listAlbums) return;\n\n          return (<AlbumList albums={data.listAlbums} />);\n        }}\n      </Connect>\n    );\n  }\n}\n\nconst GetAlbum = `query GetAlbum($id: ID!) {\n  getAlbum(id: $id) {\n    id\n    name\n    members {\n      id\n      name\n    }\n    photos {\n      thumbnail\n    }\n  }\n}`;\n\ninterface AlbumDetailsLoaderProps {\n  id: number;\n}\n\nclass AlbumDetailsLoader extends Component<AlbumDetailsLoaderProps> {\n  render() {\n    return (\n      <Connect query={graphqlOperation(GetAlbum, { id: this.props.id })}>\n        {({ data, loading, errors }) => {\n          if (loading) return (<div>Loading...</div>);\n          if (errors.length > 0) return (<div>{JSON.stringify(errors)}</div>);\n          if (!data.getAlbum) return;\n\n          return <AlbumDetails album={data.getAlbum} />;\n        }}\n      </Connect>\n    );\n  }\n}\n\nconst AlbumMembers = (props) => (\n  <div>\n    <Header as='h4'>\n      <Icon name='user circle' />\n      <Header.Content>Members</Header.Content>\n    </Header>\n    <List bulleted>\n      {props.members && props.members.map((member) => <List.Item key={member.id}>{member.name}</List.Item>)}\n    </List>\n  </div>\n);\n\ninterface User {\n  id: number;\n  name: string;\n}\n\ninterface AlbumDetailsProps {\n  album: {\n    id: number;\n    name: string;\n    members: User[];\n    photos: Photo[];\n  }\n}\n\nclass AlbumDetails extends Component<AlbumDetailsProps> {\n  render() {\n    return (\n      <Segment>\n        <Header as='h3'>{this.props.album.name}</Header>\n\n        <Segment.Group>\n          <Segment>\n            <AlbumMembers members={this.props.album.members} />\n          </Segment>\n          <Segment basic>\n            <AddUsernameToAlbum albumId={this.props.album.id} />\n          </Segment>\n        </Segment.Group>\n\n        <S3ImageUpload albumId={this.props.album.id} />\n        <PhotosList photos={this.props.album.photos} />\n      </Segment>\n    );\n  }\n}\n\ninterface S3ImageUploadProps {\n  albumId: number;\n}\n\ninterface S3ImageUploadState {\n  uploading: boolean;\n}\n\nclass S3ImageUpload extends Component<S3ImageUploadProps, S3ImageUploadState> {\n  constructor(props: S3ImageUploadProps) {\n    super(props);\n    this.state = { uploading: false };\n  }\n\n  onChange = async (e) => {\n    const file = e.target.files[0];\n    const fileName = uuid();\n\n    this.setState({ uploading: true });\n\n    const putResult = await Storage.put(\n      fileName,\n      file,\n      {\n        customPrefix: { public: 'uploads/' },\n        metadata: { albumid: this.props.albumId }\n      }\n    );\n\n    console.log('Uploaded file: ', putResult);\n    this.setState({ uploading: false });\n\n    const NewPhoto = `mutation NewPhoto($content: String!, $albumId: ID!, $bucket: String!, $fullsize: String!, $thumbnail: String!) {\n      createPhoto(content: $content, albumId: $albumId, bucket: $bucket, fullsize: $fullsize, thumbnail: $thumbnail) {\n        id\n        content\n        bucket\n        fullsize\n        thumbnail\n      }\n    }`;\n\n    return await API.graphql(graphqlOperation(NewPhoto, {\n      content: '',\n      albumId: this.props.albumId,\n      bucket: awsConfig.Storage.AWSS3.bucket,\n      fullsize: `public/${fileName}`,\n      thumbnail: `public/resized/${fileName}`\n    }));\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Button\n          onClick={() => {\n            const input = document.getElementById('add-image-file-input');\n            if (input) input.click();\n          }}\n          disabled={this.state.uploading}\n          icon='file image outline'\n          content={ this.state.uploading ? 'Uploading...' : 'Add Image' }\n        />\n        <input\n          id='add-image-file-input'\n          type=\"file\"\n          accept='image/*'\n          onChange={this.onChange}\n          style={{ display: 'none' }}\n        />\n      </div>\n    );\n  }\n}\n\ninterface Photo {\n  thumbnail: string;\n}\n\ninterface PhotosListProps {\n  photos: Photo[];\n}\n\nclass PhotosList extends Component<PhotosListProps> {\n  photoItems() {\n    return this.props.photos.map(photo =>\n      <S3Image\n        key={photo.thumbnail}\n        imgKey={photo.thumbnail.replace('public/', '')}\n        style={{display: 'inline-block', 'paddingRight': '5px'}}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <Divider hidden />\n        {this.photoItems()}\n      </div>\n    )\n  }\n}\n\ninterface AddUsernameToAlbumProps {\n  albumId: number;\n}\n\ninterface AddUsernameToAlbumState {\n  username: string;\n}\n\nclass AddUsernameToAlbum extends Component<AddUsernameToAlbumProps, AddUsernameToAlbumState> {\n  constructor(props) {\n    super(props);\n    this.state = { username: '' };\n  }\n\n  handleChange = (e, data) => {\n    if (data.name === 'username') {\n      this.setState({ username: data.value });\n    }\n  }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    const AddUsernameToAlbum = `\n      mutation AddUsernameToAlbum($username: String!, $albumId: ID!) {\n        addUsernameToAlbum(username: $username, albumId: $albumId) {\n          id\n        }\n      }\n    `;\n    const result = await API.graphql(graphqlOperation(AddUsernameToAlbum, {\n      username: this.state.username, albumId: this.props.albumId\n    }));\n\n    console.log(`Added ${this.state.username} to album id ${result.data.addUsernameToAlbum.id}`);\n    this.setState({ username: '' });\n  }\n\n  render() {\n    return (\n      <Input\n        type='text'\n        placeholder='Username'\n        icon='user plus'\n        iconPosition='left'\n        action={{ content: 'Add', onClick: this.handleSubmit }}\n        name='username'\n        value={this.state.username}\n        onChange={this.handleChange}\n      />\n    )\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Grid padded>\n          <Grid.Column>\n            <Route path=\"/\" exact component={NewAlbum} />\n            <Route path=\"/\" exact component={AlbumListLoader} />\n            <Route path=\"/albums/:albumId\"\n              render={ () => <div><NavLink to='/'>Back to Albums list</NavLink></div> }\n            />\n            <Route path=\"/albums/:albumId\"\n              render={ props => <AlbumDetailsLoader id={props.match.params.albumId} /> }\n            />\n          </Grid.Column>\n        </Grid>\n      </Router>\n    );\n  }\n}\n\nexport default withAuthenticator(App, true);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}